<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Site</title><description>A description of Site</description><link>https://your-website-url.com</link><language>en</language><lastBuildDate>Thu, 26 Mar 2020 20:26:29 +0800</lastBuildDate><pubDate>Thu, 26 Mar 2020 20:26:29 +0800</pubDate><ttl>250</ttl><atom:link href="https://your-website-url.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://your-website-url.com/posts/first-post</guid><title>My first post</title><description>A description of my first post.</description><link>https://your-website-url.com/posts/first-post</link><pubDate>Thu, 26 Mar 2020 20:18:00 +0800</pubDate><content:encoded><![CDATA[<h1>My first post</h1><p>My first post's text.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://your-website-url.com/posts/Objective-C%20%E6%8B%BE%E9%81%97%EF%BC%9Adesignated%20initializer</guid><title>Objective-C 拾遗：designated initializer</title><description></description><link>https://your-website-url.com/posts/Objective-C%20%E6%8B%BE%E9%81%97%EF%BC%9Adesignated%20initializer</link><pubDate>Thu, 13 Jun 2019 20:06:35 +0800</pubDate><content:encoded><![CDATA[<h1>Objective-C 拾遗：designated initializer</h1><h3>designated initializer是什么</h3><blockquote><p>The initializer of a class that takes the full complement of initialization parameters is usually the designated initializer. [^1]</p></blockquote><p>来自官方文档的介绍是designated initializer 通常是接收最多初始化参数的一个initializer</p><h3>designated initializer的作用</h3><p>一个类通常会有一个提供便利初始化的initializer,它通常接收最多的初始化参数。而这个initializer便通常是designated initializer,一个类里面最重要的initializer。主要的implementation都写在这里。其他initializer则调用它即可,不需要重复写相关代码。这个模式保证了所有的初始化方法都正确地初始实例变量。</p><p>例如一个Task类，它有三个initializer</p><p><s>~objective-c - (id)init; - (id)initWithTitle:(NSString <em>)aTitle; - (id)initWithTitle:(NSString </em>)aTitle date:(NSDate *)aDate; </s>~</p><p>则designated initializer便是</p><p><s>~objective-c - (id)initWithTitle:(NSString <em>)aTitle date:(NSDate </em>)aDate; </s>~</p><p>其他初始化方法则是convenience initializer,通过调用designated initializer或其他initializer来完成初始化工作。</p><p><s>~objective-c - (id)initWithTitle:(NSString *)aTitle { return [self initWithTitle:aTitle date:[NSDate date]]; } - (id)init { return [self initWithTitle:@”Task”]; } </s>~</p><h3>designated initializer的使用</h3><p>一直以来,在Objective-C中,designated initializer是作为一个概念存在的,官方文档中希望我们能遵循这样的概念和规范。但是没有严格的语法进行限定,因此导致许多不知道这个概念或是贪方便的开发者没有进行严格的使用。</p><p>在XCode6后,Objective-C新增了<code>NS_DESIGNATED_INITIALIZER </code>宏定义来进行规范。[^4]</p><p>使用了它之后:</p><ol><li>该designated initializer的实现一定要调用superclass的designated initializer方法</li></ol><p>即：	<s>~objective-c	声明：	- (instancetype)initWithObject:(ObjectType)object NS<em>DESIGNATED</em>INITIALIZER;	实现：	- (instancetype)initWithNSString:(NSString*)string //子类的designated initializer	{ self = [super init]; //这里必须调用父类的designated initializer if (self) { ...... } return self;	}	</s>~ 2. 没有标注为designated initializer的初始化方法都是convenience initializer。都需要调用自己的designated initializer。</p><p>即：	<s>~objective-c	- (instancetype)init //没有标注的初始化方法都是convenience initializer	{<br> return [self initWithObject:@"default string"];	}	</s>~</p><p>如果没有符合规范,编译器会出现Warnings。</p><p>如果我们在一个类里采用了<code>NS_DESIGNATED_INITIALIZER</code>,则我们的所有初始化方法都要按照以上的规范进行。</p><p>事实上 Swift同样也使用了designated initializer这样的概念。Objective-C中加入限制的宏,我们有理由相信这是为了配合Swift更严格的控制。</p><p>Swift更加严格地定义了designated initializer和它的使用规则。 详情可以查阅《The Swift Programming Language》。</p><p><strong>后续：</strong> 开始学习Swift后,越发感受到它的魅力。欢迎阅读：<a href="https://github.com/100mango/zen/blob/master/Swift%E5%AD%A6%E4%B9%A0%EF%BC%9ASwift%E4%B8%8EObjective-C/Swift%E5%AD%A6%E4%B9%A0%EF%BC%9ASwift%E4%B8%8EObjective-C.md">Swift学习：Swift与Objective-C</a></p><p>使用的规则是基本一致的，我们在OC也是遵循这样的规则的。 &gt;Rule 1 A designated initializer must call a designated initializer from its immediate superclass.</p><p>&gt;Rule 2 A convenience initializer must call another initializer from the same class.</p><p>&gt;Rule 3 A convenience initializer must ultimately call a designated initialize[^2]</p><p>规则可以用这样一幅图显示:</p><img src="https://github.com/100mango/zen/blob/master/Objective-C%20%E6%8B%BE%E9%81%97%EF%BC%9Adesignated%20initializer/Designated%20Initializers%20and%20Convenience%20Initializers.png"/><h3>个人心得</h3><p>在自己的开发过程中,合理地遵守和运用designated initializer会减少许多重复代码。</p><p>并且理解了这一个概念,对整个Cocoa框架的理解也有帮助。 例如UIViewController的Designated initializer是</p><p><s>~objective-c - (instancetype)initWithNibName:(NSString <em>)nibName bundle:(NSBundle </em>)nibBundle </s>~</p><p>但是可能有人会发现,如果你直接使用 [[viewController alloc]init]来生成Controller,且你是使用XIB来组织界面的,那么最后你得到的ViewController的View还是来自XIB的。</p><p>这背后的原因就是Designated initializer帮你完成了这个工作。</p><blockquote><p>If you specify nil for the nibName parameter and you do not override the loadView method, the view controller searches for a nib file using other means.[^3]</p></blockquote>]]></content:encoded></item></channel></rss>